// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  password  String?
  avatar    String?
  level     Int
  gender    String?
  studentId String
  role      UserRole @default(USER)

  favoriteStores FavoriteStore[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model FavoriteStore {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, storeId])
  @@index([userId])
  @@index([storeId])
}

enum StoreType {
  STORE
  RESTAURANT
  CAFE
}

model Store {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  // id        Int      @id @default(autoincrement())
  name String
  type StoreType @default(STORE)

  longitude Float
  latitude  Float

  users    FavoriteStore[]
  products StoreProduct[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model StoreProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Product {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  // id        Int      @id @default(autoincrement())
  name  String
  price Float

  users StoreProduct[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
